- key: component_types
  label: Component Types
  description: |
    Components are the physical parts that constitute a system.
    In our research we found several types of recurring components in the systems.
    From the security perspective the available component types provide an indication of possible attack vectors.
    Regardless of the attack vectors for specific components generic attack vectors apply to every component type.
    Furthermore the more component types are used in a system the more attack vectors are in the interaction layer amongst them.
    There may be compound devices in the system to which several component types apply in this case all component types that
    apply to those devices must be check marked for the respective system.

- key: simple_components
  label: Simple Components
  description: |
    Simple components cover a narrow scope of functionality and have a clear deterministic behaviour pattern.
    Hence such devices to not cover complex application logic.

- key: sensors
  label: Sensors
  description: |
    Sensors are passive components that signal environmental conditions to the system but do not manipulate their environment.
    Sensors may receive commands e.g. for device configuration.
  parent: simple_components

- key: actuators
  label: Actuators
  description: |
    Actuators are active components which manipulate their environmetbased on commands from other components.
    Providing actuators with counterfeit commands may enable unauthorised control.
  parent: simple_components

- key: complex_components
  label: Complex Components
  description: |
    Components that either provide additional functionality apart from their primary function
    like a management interface or complex logic functions and components that generate or
    process high amount of data are regarded as complex components.

- key: cameras
  label: Cameras
  description: |
    Cameras are more complex than other sensors as they process high amounts of data and usually require special communication
    behaviours and protocols. Compromising cameras may provide unauthorised surveillance which may lead to various possibilities of abuse.
  parent: complex_components

- key: repeater
  label: Repeaters
  description: |
    Repeaters are passive components which forward messages between components using the same communication protocol.
    Faking identity of or infiltrating a vulnerable repeater may enable one to eavesdrop on an arbitrary amount of a system’s communication or to tamper with it.
  parent: simple_components

- key: protocol_bridge
  label: Protocol Bridge
  description: |
    Unlike repeaters
    protocol bridges mediate communication between different protocols
    in contrast to controllers
    they do not translate the information payload but encapsulate it.
  parent: component_types

- key: controller
  label: Controller
  description: |
    A controller is a component which uses complex logic e.g.
    to manage components in one or multiple component networks
    execute automation rules
    provide API for frontend applications
    connect to external services and more. Hence a controller is considered to be a complex device
    which may expose a multitude of vulnerabilities.
  parent: complex_components

- key: frontends
  label: Frontends
  description: |
    Frontends provide user access to the smarthome system and probably allow to perform
    manyfold actions like controlling actuators, surveillance or managing the system.
    Hence frontends are as attractive to attack as the controller.
    Furthermore, frontends are used on devices that may be less secured and subject to other attacks,
    allowing to take control over the device first and gain unauthorized access to the frontend application.

- key: mobile_app
  label: Mobile App
  description: |
    Mobile apps are usually used to give a user convenient access to a system’s functionality.
    This may include viewing and modifying components’ status and system configuration.
    As mobile apps are specific to a device executing them e.g. a tablet or a smartphone they may be compromised by attacks that the particular device is vulnerable to.
  parent: frontends

- key: web_frontend
  label: Web Frontend
  description: |
    Similar to mobile apps web frontends give a user access to a system’s functionality.
    In contrast to mobile apps web frontends are not specific to a particular device and can
    usually be accessed by any device that is connected to the corresponding network thus potentially exposing respective vulnerabilities.
  parent: frontends

- key: internet_backend
  label: Internet Backend
  description: |
    Internet backends provide server- or cloud-based Internet access and may enable one to outsource and backup a system’s data and configuration.
    Forging an Internet backend’s identity or tampering with the communication between the backend and a system may provide arbitrary access to the connected system.
  parent: component_types


- key: automation
  label: Automation
  description: |
    Many systems provide a functionality to automate processes described by rules—for instance
    actuators performing actions based on corresponding sensor inputs.
    In general a higher degree of automation may raise more potential vulnerabilities.

- key: sensor_actuator_association
  label: Sensor Actuator Association
  description: |
    In sensor-actuator association a sensor’s output is directly associated to an actuator’s input
    i.e. the actuator will perform an action if the sensor emits a corresponding value.
    This requires associated actors and sensors to use the same protocol and may remain active even in
    absence of a controller or communication with frontends.
    The often simple point-to-point communication between associated devices may be tampered with.
  parent: automation

- key: remote_control
  label: Remote Control
  description: |
    In the scheme
    remote control is defined to be performed through web frontends or mobile apps.
    In contrast to sensor-actuator association components to be controlled usually use
    various different communication protocols requiring a controller or bridge to communicate with.
  parent: automation

- key: static_rules
  label: Static Rules
  description: |
    Static rules are usually trigger-based using e.g. sensor values user interaction or time conditions to execute corresponding actions.
    While the evaluation of static rules is usually performed by a component with higher logic functions e.g. by a controller or Internet backend
    and may include simple calculations to generate output values static rules do not include variable arguments which would turn them into adaptive automation.
  parent: automation

- key: adaptive_automation
  label: Adaptive Automation
  description: |
    Adaptive automation is based on static rules with variable parameters that are evaluated and refined by a learning function
    which can potentially be tampered with.
  parent: automation

- key: extensibility
  label: Extensibility
  description: |
    IoT and smarthome systems may be extended in various ways.
    From the security perspective extensibility requires either functionality that is not used if the extension is not available or relies on interfaces (software or hardware
    which may expose vulnerabilities. Extensibility also refers to components that can be used within the system. A fully extensible system would allow the addition of arbitrary devices
    while a closed system would only accept integration of a number of specific trustworthy devices.

- key: arbitrary_devices
  label: Extension with Arbitrary Devices
  description: |
    While most IoT and smarthome systems favor specific extension devices
    e.g.
    only supporting devices of the system’s manufacturer
    some systems also allow for the extension with arbitrary devices
    providing such devices with at least a minium set of functionality.
    Application of arbitrary devices may cause the introduction of vulnerabilities specific to a particular device.
  parent: extensibility

- key: third_party_services
  label: Third-Party Services
  description: |
    External services usually use REST APIs to integrate their functionality into a system.
    A common way is to use webhooks or foreign APIs while a system itself may also provide a dedicated
    API for third-party use. In the scheme definition this also includes non-public APIs.
    As network APIs can be reverse engineered it is irreleavant whether a documentation is publicly available or not.
  parent: extensibility

- key: integration_with_other_iot_systems
  label: Integration with other Smarthome Systems
  description: |
    Many systems allow the integration of other IoT and smarthome systems
    for instance
    it is possible to include Phillips Hue with many other systems. If this integration is performed
    the host-system will inherit at least some of the vulnerabilities of the connected system.
  parent: extensibility

- key: software_add_ons
  label: Software Add-Ons and Firmware Upgrades
  description: |
    Systems that allow one to install add-ons (plugins) or to update the firmware are regarded equally vulnerable from the security perspective
    as both enable one to install potentially harmful software.
  parent: extensibility

- key: hidden_features
  label: Hidden Features
  description: |
    Some systems offer additional features that may be unlocked with a special token
    e.g.
    an unlock code. In contrast to extensibility by software add-ons
    such hidden features are usually already present in the system
    potentially inlcuding additional
    not obvious vulnerabilities.
  parent: extensibility

- key: hardware_add_ons
  label: Hardware Add-Ons
  description: |
    Hardware add-ons enable one to provide components with additional functionality
    e.g.
    dongles to support additional protocols. Unlike arbitrary devices which depend on existing functionality
    hardware add-ons provide extra functionality
    potentially exposing additional attack vectors to the system. To enable the integration of such add-ons
    the component to be extended usually already contains corresponding software.
  parent: extensibility

- key: extension_modules
  label: Extension Modules
  description: |
    Extension modules accumulate the characteristics and security considerations of both soft- and hardware add-ons
    i.e.
    hardware along with the software needed for its operation within the target system. This may also entail further vulnerabilities.
  parent: extensibility


- key: access_paths
  label: Access Paths
  description: |
    Access paths describe the ways the user can interact with the system and how the components interact amongst each other.

- key: access_path_components
  label: Components
  description: |
  parent: access_paths

- key: radio_components
  label: Radio components
  description: |
    Many systems use radio protocols like IEEE 802.15.4
    Bluetooth or WiFi for communication between components. This may allow an attacker to manipulate the system from some distance without having to be present at the location.
  parent: access_path_components

- key: wired_components
  label: Wired Components
  description: |
    In wired components
    communication between the components is performed via cable instead of RF. For an attacker
    physical access to the cable is required to perform malicious actions. Based on this fact
    some wire-based protocols entirely lack authentication and encryption.
  parent: access_path_components

- key: local_network_API
  label: Local network API
  description: |
    Frontends often may use an API over the local network to communicate with components. This access path may be missing network security features that are not usable in local environments (like TLS). Furthermore
    many systems seem to rely on local networks as a trusted connection.
  parent: access_paths

- key: internet_API
  label: Internet API
  description: |
    The system exposes a network API for frontends or external services which makes it accessible via Internet. In this scenario the possible group of attackers is larger
    but it is also possible to incorporate more security features compared to a local environment.
  parent: access_paths

- key: non_API_access
  label: Non-API access
  description: |
    Commonly
    systems provide an API to access the specific functionality of the system
    some systems also provide non-API access
    e.g. to upload or download files via ftp
  parent: access_paths
